import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { VoiceInput } from '@/components/VoiceInput';
import { SchemeCard, Scheme } from '@/components/SchemeCard';
import { UserProfile, UserProfileData } from '@/components/UserProfile';
import { getRelevantSchemes } from '@/data/schemes';
import { useToast } from '@/hooks/use-toast';
import { 
  Bot, Heart, Users, Zap, Shield, 
  MessageSquare, Search, FileText, 
  ArrowRight, CheckCircle, Globe,
  Mic, Smartphone, Award
} from 'lucide-react';

type AppState = 'welcome' | 'profile' | 'chat' | 'results';

const Index = () => {
  const [appState, setAppState] = useState<AppState>('welcome');
  const [userProfile, setUserProfile] = useState<UserProfileData>({
    state: '',
    occupation: '',
    gender: '',
    category: '',
    education: ''
  });
  const [isListening, setIsListening] = useState(false);
  const [chatInput, setChatInput] = useState('');
  const [conversation, setConversation] = useState<Array<{type: 'user' | 'ai', message: string}>>([]);
  const [recommendedSchemes, setRecommendedSchemes] = useState<Array<Scheme & { matchScore: number }>>([]);
  const { toast } = useToast();

  const handleVoiceTranscription = (text: string, language: string) => {
    setChatInput(text);
    handleSendMessage(text);
  };

  const handleSendMessage = (message?: string) => {
    const text = message || chatInput;
    if (!text.trim()) return;

    // Add user message to conversation
    const newConversation = [...conversation, { type: 'user' as const, message: text }];
    setConversation(newConversation);
    setChatInput('');

    // Simulate AI processing and get scheme recommendations
    setTimeout(() => {
      const schemes = getRelevantSchemes(userProfile);
      setRecommendedSchemes(schemes);
      
      const aiResponse = schemes.length > 0
        ? `‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§Æ‡•à‡§Ç‡§®‡•á ${schemes.length} ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§ñ‡•ã‡§ú‡•Ä ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§π‡•à‡§Ç‡•§ ‡§á‡§®‡§Æ‡•á‡§Ç ‡§∏‡•á ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ${schemes[0].name} ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•ã ${schemes[0].benefits} ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§`
        : '‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§';
      
      setConversation([...newConversation, { type: 'ai', message: aiResponse }]);
      setAppState('results');
    }, 1500);
  };

  const handleApplyScheme = (scheme: Scheme) => {
    toast({
      title: "‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ",
      description: `${scheme.name} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã ${scheme.applicationUrl || '‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø'} ‡§™‡§∞ ‡§ú‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§`,
    });
  };

  if (appState === 'welcome') {
    return (
      <div className="min-h-screen bg-background">
        {/* Hero Section */}
        <div className="relative overflow-hidden bg-gradient-to-br from-primary/5 via-background to-accent/5">
          <div className="container mx-auto px-4 py-16 lg:py-24">
            <div className="text-center max-w-4xl mx-auto">
              <div className="mb-8">
                <Badge className="mb-4 bg-success">
                  üáÆüá≥ ‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç
                </Badge>
                <h1 className="text-4xl lg:text-6xl font-bold mb-6 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
                  YojanaAI
                </h1>
                <p className="text-xl lg:text-2xl text-muted-foreground mb-4">
                  ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ AI ‡§∏‡§π‡§æ‡§Ø‡§ï
                </p>
                <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                  ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç, ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞, ‡§∏‡§π‡•Ä ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç‡•§ 
                  ‡§¨‡§∏ ‡§¨‡•ã‡§≤‡•á‡§Ç ‡§Ø‡§æ ‡§≤‡§ø‡§ñ‡•á‡§Ç - ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á‡•§
                </p>
              </div>

              <div className="flex flex-col sm:flex-row gap-4 justify-center mb-12">
                <Button 
                  size="lg" 
                  className="bg-primary hover:bg-primary-hover text-lg px-8"
                  onClick={() => setAppState('profile')}
                >
                  ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                  <ArrowRight className="w-5 h-5 ml-2" />
                </Button>
                <Button 
                  size="lg" 
                  variant="outline" 
                  className="text-lg px-8"
                  onClick={() => setAppState('chat')}
                >
                  <Mic className="w-5 h-5 mr-2" />
                  ‡§Ü‡§µ‡§æ‡§ú ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
                </Button>
              </div>

              {/* Features Grid */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto">
                <Card className="border-border hover:shadow-lg transition-shadow">
                  <CardContent className="p-6 text-center">
                    <Globe className="w-12 h-12 text-primary mx-auto mb-4" />
                    <h3 className="font-bold mb-2">‡§¨‡§π‡•Å‡§≠‡§æ‡§∑‡•Ä ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§§‡•á‡§≤‡•Å‡§ó‡•Å, ‡§§‡§Æ‡§ø‡§≤ ‡§î‡§∞ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-border hover:shadow-lg transition-shadow">
                  <CardContent className="p-6 text-center">
                    <Bot className="w-12 h-12 text-accent mx-auto mb-4" />
                    <h3 className="font-bold mb-2">AI ‡§™‡§æ‡§µ‡§∞‡•ç‡§°</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§∏‡§Æ‡§ù‡§ï‡§∞ ‡§∏‡§π‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∏‡•Å‡§ù‡§æ‡§§‡§æ ‡§π‡•à
                    </p>
                  </CardContent>
                </Card>

                <Card className="border-border hover:shadow-lg transition-shadow">
                  <CardContent className="p-6 text-center">
                    <Shield className="w-12 h-12 text-success mx-auto mb-4" />
                    <h3 className="font-bold mb-2">‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§î‡§∞ ‡§Æ‡•Å‡§´‡•ç‡§§</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§, ‡§ï‡•ã‡§à ‡§´‡•Ä‡§∏ ‡§®‡§π‡•Ä‡§Ç
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>

        {/* Problem Statement */}
        <div className="container mx-auto px-4 py-16 bg-muted/20">
          <div className="max-w-4xl mx-auto text-center">
            <h2 className="text-3xl font-bold mb-8">‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="space-y-4">
                <h3 className="text-xl font-semibold text-destructive">‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç</h3>
                <ul className="space-y-2 text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 bg-destructive rounded-full"></span>
                    ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•Ä ‡§¨‡§æ‡§ß‡§æ - ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 bg-destructive rounded-full"></span>
                    700+ ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó ‡§ú‡§ó‡§π
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 bg-destructive rounded-full"></span>
                    ‡§ú‡§ü‡§ø‡§≤ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§®‡§ø‡§Ø‡§Æ
                  </li>
                  <li className="flex items-center gap-2">
                    <span className="w-2 h-2 bg-destructive rounded-full"></span>
                    ‡§¨‡§ø‡§ö‡•å‡§≤‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§∂‡•ã‡§∑‡§£
                  </li>
                </ul>
              </div>
              <div className="space-y-4">
                <h3 className="text-xl font-semibold text-success">YojanaAI ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®</h3>
                <ul className="space-y-2 text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    ‡§Ü‡§™‡§ï‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    ‡§∏‡§≠‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§è‡§ï ‡§ú‡§ó‡§π
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    AI ‡§∏‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§ú‡§æ‡§Ç‡§ö
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    ‡§∏‡•Ä‡§ß‡•á ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (appState === 'profile') {
    return (
      <div className="min-h-screen bg-background py-8">
        <div className="container mx-auto px-4 max-w-3xl">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2">‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≠‡§∞‡•á‡§Ç</h1>
            <p className="text-muted-foreground">‡§∏‡§π‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è</p>
          </div>
          
          <UserProfile 
            profile={userProfile}
            onProfileUpdate={setUserProfile}
            onProfileComplete={() => setAppState('chat')}
          />
          
          <div className="text-center mt-6">
            <Button 
              variant="outline" 
              onClick={() => setAppState('welcome')}
            >
              ‡§µ‡§æ‡§™‡§∏ ‡§ú‡§æ‡§è‡§Ç
            </Button>
          </div>
        </div>
      </div>
    );
  }

  if (appState === 'chat') {
    return (
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-8 max-w-4xl">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2">YojanaAI ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç</h1>
            <p className="text-muted-foreground">‡§Ö‡§™‡§®‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§¨‡§§‡§æ‡§è‡§Ç, ‡§π‡§Æ ‡§∏‡§π‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ñ‡•ã‡§ú‡•á‡§Ç‡§ó‡•á</p>
          </div>

          {/* Conversation Display */}
          {conversation.length > 0 && (
            <Card className="mb-6 max-h-64 overflow-y-auto border-border">
              <CardContent className="p-4 space-y-4">
                {conversation.map((msg, index) => (
                  <div 
                    key={index} 
                    className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div 
                      className={`max-w-[80%] p-3 rounded-lg ${
                        msg.type === 'user' 
                          ? 'bg-primary text-primary-foreground' 
                          : 'bg-muted'
                      }`}
                    >
                      <p className="text-sm">{msg.message}</p>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>
          )}

          {/* Voice Input */}
          <div className="mb-6">
            <VoiceInput 
              onTranscription={handleVoiceTranscription}
              isListening={isListening}
              setIsListening={setIsListening}
            />
          </div>

          {/* Text Input */}
          <Card className="border-border">
            <CardContent className="p-4">
              <div className="flex gap-2">
                <Textarea
                  placeholder="‡§Ø‡§æ ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç: ‡§Æ‡•à‡§Ç ‡§ï‡§ø‡§∏‡§æ‡§® ‡§π‡•Ç‡§Ç, 2 ‡§è‡§ï‡§°‡§º ‡§ú‡§Æ‡•Ä‡§® ‡§π‡•à..."
                  value={chatInput}
                  onChange={(e) => setChatInput(e.target.value)}
                  className="flex-1 min-h-[60px]"
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
                <Button 
                  onClick={() => handleSendMessage()}
                  disabled={!chatInput.trim()}
                  size="lg"
                  className="bg-primary hover:bg-primary-hover"
                >
                  <Search className="w-4 h-4" />
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="text-center mt-6 space-x-4">
            <Button 
              variant="outline" 
              onClick={() => setAppState('profile')}
            >
              ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§è‡§°‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setAppState('welcome')}
            >
              ‡§π‡•ã‡§Æ ‡§ú‡§æ‡§è‡§Ç
            </Button>
          </div>
        </div>
      </div>
    );
  }

  if (appState === 'results') {
    return (
      <div className="min-h-screen bg-background">
        <div className="container mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold mb-2">‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç</h1>
            <p className="text-muted-foreground">
              {recommendedSchemes.length} ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞
            </p>
          </div>

          {/* Latest Conversation */}
          {conversation.length > 0 && (
            <Card className="mb-8 border-border">
              <CardContent className="p-4">
                <h3 className="font-bold mb-2 flex items-center gap-2">
                  <MessageSquare className="w-4 h-4" />
                  ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§
                </h3>
                <div className="space-y-2">
                  {conversation.slice(-2).map((msg, index) => (
                    <div key={index} className={msg.type === 'user' ? 'text-right' : ''}>
                      <Badge variant={msg.type === 'user' ? 'default' : 'secondary'}>
                        {msg.type === 'user' ? '‡§Ü‡§™' : 'YojanaAI'}
                      </Badge>
                      <p className="text-sm mt-1">{msg.message}</p>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Scheme Results */}
          {recommendedSchemes.length > 0 ? (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {recommendedSchemes.map((scheme) => (
                <SchemeCard
                  key={scheme.id}
                  scheme={scheme}
                  matchScore={scheme.matchScore}
                  onApply={handleApplyScheme}
                />
              ))}
            </div>
          ) : (
            <Card className="text-center p-8 border-border">
              <CardContent>
                <FileText className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
                <h3 className="text-xl font-bold mb-2">‡§ï‡•ã‡§à ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä</h3>
                <p className="text-muted-foreground mb-4">
                  ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞ ‡§ï‡•ã‡§à ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§
                </p>
                <Button onClick={() => setAppState('profile')}>
                  ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                </Button>
              </CardContent>
            </Card>
          )}

          <div className="text-center mt-8 space-x-4">
            <Button 
              onClick={() => setAppState('chat')}
              className="bg-primary hover:bg-primary-hover"
            >
              ‡§î‡§∞ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç
            </Button>
            <Button 
              variant="outline" 
              onClick={() => setAppState('profile')}
            >
              ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§è‡§°‡§ø‡§ü ‡§ï‡§∞‡•á‡§Ç
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return null;
};

export default Index;
